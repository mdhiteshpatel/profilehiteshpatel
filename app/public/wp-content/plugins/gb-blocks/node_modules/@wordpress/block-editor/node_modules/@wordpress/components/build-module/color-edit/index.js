import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import kebabCase from 'lodash';
/**
 * WordPress dependencies
 */

import { useState, useRef, useEffect } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
import { lineSolid, moreVertical, plus } from '@wordpress/icons';
import { __experimentalUseFocusOutside as useFocusOutside } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import Button from '../button';
import { ColorPicker } from '../color-picker';
import { FlexItem } from '../flex';
import { HStack } from '../h-stack';
import { ItemGroup } from '../item-group';
import { VStack } from '../v-stack';
import ColorPalette from '../color-palette';
import DropdownMenu from '../dropdown-menu';
import Popover from '../popover';
import { ColorActionsContainer, ColorEditStyles, ColorHeading, ColorHStackHeader, ColorIndicatorStyled, ColorItem, ColorNameContainer, ColorNameInputControl, DoneButton, RemoveButton } from './styles';
import { NavigableMenu } from '../navigable-container';

function ColorNameInput({
  value,
  onChange
}) {
  return createElement(ColorNameInputControl, {
    label: __('Color name'),
    hideLabelFromVision: true,
    value: value,
    onChange: onChange
  });
}

function ColorOption({
  color,
  onChange,
  isEditing,
  onStartEditing,
  onRemove,
  onStopEditing
}) {
  const focusOutsideProps = useFocusOutside(onStopEditing);
  return createElement(ColorItem, _extends({
    as: "div",
    onClick: onStartEditing
  }, isEditing ? focusOutsideProps : {}), createElement(HStack, {
    justify: "flex-start"
  }, createElement(FlexItem, null, createElement(ColorIndicatorStyled, {
    colorValue: color.color
  })), createElement(FlexItem, null, isEditing ? createElement(ColorNameInput, {
    value: color.name,
    onChange: nextName => onChange({ ...color,
      name: nextName,
      slug: kebabCase(nextName)
    })
  }) : createElement(ColorNameContainer, null, color.name)), isEditing && createElement(FlexItem, null, createElement(RemoveButton, {
    isSmall: true,
    icon: lineSolid,
    label: __('Remove color'),
    onClick: onRemove
  }))), isEditing && createElement(Popover, {
    position: "bottom left",
    className: "components-color-edit__color-popover"
  }, createElement(ColorPicker, {
    color: color.color,
    onChange: newColor => onChange({ ...color,
      color: newColor
    })
  })));
}

function ColorPaletteEditListView({
  colors,
  onChange,
  editingColor,
  setEditingColor
}) {
  // When unmounting the component if there are empty colors (the user did not complete the insertion) clean them.
  const colorReference = useRef();
  useEffect(() => {
    colorReference.current = colors;
  }, [colors]);
  useEffect(() => {
    return () => {
      if (colorReference.current.some(({
        slug
      }) => !slug)) {
        const newColors = colorReference.current.filter(({
          slug
        }) => slug);
        onChange(newColors.length ? newColors : undefined);
      }
    };
  }, []);
  return createElement(VStack, {
    spacing: 3
  }, createElement(ItemGroup, {
    isBordered: true,
    isSeparated: true
  }, colors.map((color, index) => createElement(ColorOption, {
    key: index,
    color: color,
    onStartEditing: () => {
      if (editingColor !== index) {
        setEditingColor(index);
      }
    },
    onChange: newColor => {
      onChange(colors.map((currentColor, currentIndex) => {
        if (currentIndex === index) {
          return newColor;
        }

        return currentColor;
      }));
    },
    onRemove: () => {
      setEditingColor(null);
      const newColors = colors.filter((_currentColor, currentIndex) => {
        if (currentIndex === index) {
          return false;
        }

        return true;
      });
      onChange(newColors.length ? newColors : undefined);
    },
    isEditing: index === editingColor,
    onStopEditing: () => {
      if (index === editingColor) {
        setEditingColor(null);
      }
    }
  }))));
}

const EMPTY_ARRAY = [];
export default function ColorEdit({
  colors = EMPTY_ARRAY,
  onChange
}) {
  const [isEditing, setIsEditing] = useState(false);
  const [editingColor, setEditingColor] = useState(null);
  const isAdding = isEditing && editingColor && colors[editingColor] && !colors[editingColor].slug;
  const hasColors = colors.length > 0;
  return createElement(ColorEditStyles, null, createElement(ColorHStackHeader, null, createElement(ColorHeading, null, __('Custom')), createElement(ColorActionsContainer, null, isEditing && createElement(DoneButton, {
    isSmall: true,
    onClick: () => {
      setIsEditing(false);
      setEditingColor(null);
    }
  }, __('Done')), createElement(Button, {
    isSmall: true,
    isPressed: isAdding,
    icon: plus,
    label: __('Add custom color'),
    onClick: () => {
      onChange([...colors, {
        color: '#000',
        name: '',
        slug: ''
      }]);
      setIsEditing(true);
      setEditingColor(colors.length);
    }
  }), !isEditing && createElement(Button, {
    disabled: !hasColors,
    isSmall: true,
    icon: moreVertical,
    label: __('Edit colors'),
    onClick: () => {
      setIsEditing(true);
    }
  }), isEditing && createElement(DropdownMenu, {
    icon: moreVertical,
    label: __('Custom color options'),
    toggleProps: {
      isSmall: true
    }
  }, ({
    onClose
  }) => createElement(Fragment, null, createElement(NavigableMenu, {
    role: "menu"
  }, createElement(Button, {
    variant: "tertiary",
    onClick: () => {
      setEditingColor(null);
      setIsEditing(false);
      onChange();
      onClose();
    }
  }, __('Remove all custom colors'))))))), hasColors && createElement(Fragment, null, isEditing && createElement(ColorPaletteEditListView, {
    colors: colors,
    onChange: onChange,
    editingColor: editingColor,
    setEditingColor: setEditingColor
  }), !isEditing && createElement(ColorPalette, {
    colors: colors,
    onChange: () => {},
    clearable: false,
    disableCustomColors: true
  })), !hasColors && __('Custom colors are empty! Add some colors to create your own color palette.'));
}
//# sourceMappingURL=index.js.map