"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ColorEdit;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _lodash = _interopRequireDefault(require("lodash"));

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _compose = require("@wordpress/compose");

var _button = _interopRequireDefault(require("../button"));

var _colorPicker = require("../color-picker");

var _flex = require("../flex");

var _hStack = require("../h-stack");

var _itemGroup = require("../item-group");

var _vStack = require("../v-stack");

var _colorPalette = _interopRequireDefault(require("../color-palette"));

var _dropdownMenu = _interopRequireDefault(require("../dropdown-menu"));

var _popover = _interopRequireDefault(require("../popover"));

var _styles = require("./styles");

var _navigableContainer = require("../navigable-container");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ColorNameInput({
  value,
  onChange
}) {
  return (0, _element.createElement)(_styles.ColorNameInputControl, {
    label: (0, _i18n.__)('Color name'),
    hideLabelFromVision: true,
    value: value,
    onChange: onChange
  });
}

function ColorOption({
  color,
  onChange,
  isEditing,
  onStartEditing,
  onRemove,
  onStopEditing
}) {
  const focusOutsideProps = (0, _compose.__experimentalUseFocusOutside)(onStopEditing);
  return (0, _element.createElement)(_styles.ColorItem, (0, _extends2.default)({
    as: "div",
    onClick: onStartEditing
  }, isEditing ? focusOutsideProps : {}), (0, _element.createElement)(_hStack.HStack, {
    justify: "flex-start"
  }, (0, _element.createElement)(_flex.FlexItem, null, (0, _element.createElement)(_styles.ColorIndicatorStyled, {
    colorValue: color.color
  })), (0, _element.createElement)(_flex.FlexItem, null, isEditing ? (0, _element.createElement)(ColorNameInput, {
    value: color.name,
    onChange: nextName => onChange({ ...color,
      name: nextName,
      slug: (0, _lodash.default)(nextName)
    })
  }) : (0, _element.createElement)(_styles.ColorNameContainer, null, color.name)), isEditing && (0, _element.createElement)(_flex.FlexItem, null, (0, _element.createElement)(_styles.RemoveButton, {
    isSmall: true,
    icon: _icons.lineSolid,
    label: (0, _i18n.__)('Remove color'),
    onClick: onRemove
  }))), isEditing && (0, _element.createElement)(_popover.default, {
    position: "bottom left",
    className: "components-color-edit__color-popover"
  }, (0, _element.createElement)(_colorPicker.ColorPicker, {
    color: color.color,
    onChange: newColor => onChange({ ...color,
      color: newColor
    })
  })));
}

function ColorPaletteEditListView({
  colors,
  onChange,
  editingColor,
  setEditingColor
}) {
  // When unmounting the component if there are empty colors (the user did not complete the insertion) clean them.
  const colorReference = (0, _element.useRef)();
  (0, _element.useEffect)(() => {
    colorReference.current = colors;
  }, [colors]);
  (0, _element.useEffect)(() => {
    return () => {
      if (colorReference.current.some(({
        slug
      }) => !slug)) {
        const newColors = colorReference.current.filter(({
          slug
        }) => slug);
        onChange(newColors.length ? newColors : undefined);
      }
    };
  }, []);
  return (0, _element.createElement)(_vStack.VStack, {
    spacing: 3
  }, (0, _element.createElement)(_itemGroup.ItemGroup, {
    isBordered: true,
    isSeparated: true
  }, colors.map((color, index) => (0, _element.createElement)(ColorOption, {
    key: index,
    color: color,
    onStartEditing: () => {
      if (editingColor !== index) {
        setEditingColor(index);
      }
    },
    onChange: newColor => {
      onChange(colors.map((currentColor, currentIndex) => {
        if (currentIndex === index) {
          return newColor;
        }

        return currentColor;
      }));
    },
    onRemove: () => {
      setEditingColor(null);
      const newColors = colors.filter((_currentColor, currentIndex) => {
        if (currentIndex === index) {
          return false;
        }

        return true;
      });
      onChange(newColors.length ? newColors : undefined);
    },
    isEditing: index === editingColor,
    onStopEditing: () => {
      if (index === editingColor) {
        setEditingColor(null);
      }
    }
  }))));
}

const EMPTY_ARRAY = [];

function ColorEdit({
  colors = EMPTY_ARRAY,
  onChange
}) {
  const [isEditing, setIsEditing] = (0, _element.useState)(false);
  const [editingColor, setEditingColor] = (0, _element.useState)(null);
  const isAdding = isEditing && editingColor && colors[editingColor] && !colors[editingColor].slug;
  const hasColors = colors.length > 0;
  return (0, _element.createElement)(_styles.ColorEditStyles, null, (0, _element.createElement)(_styles.ColorHStackHeader, null, (0, _element.createElement)(_styles.ColorHeading, null, (0, _i18n.__)('Custom')), (0, _element.createElement)(_styles.ColorActionsContainer, null, isEditing && (0, _element.createElement)(_styles.DoneButton, {
    isSmall: true,
    onClick: () => {
      setIsEditing(false);
      setEditingColor(null);
    }
  }, (0, _i18n.__)('Done')), (0, _element.createElement)(_button.default, {
    isSmall: true,
    isPressed: isAdding,
    icon: _icons.plus,
    label: (0, _i18n.__)('Add custom color'),
    onClick: () => {
      onChange([...colors, {
        color: '#000',
        name: '',
        slug: ''
      }]);
      setIsEditing(true);
      setEditingColor(colors.length);
    }
  }), !isEditing && (0, _element.createElement)(_button.default, {
    disabled: !hasColors,
    isSmall: true,
    icon: _icons.moreVertical,
    label: (0, _i18n.__)('Edit colors'),
    onClick: () => {
      setIsEditing(true);
    }
  }), isEditing && (0, _element.createElement)(_dropdownMenu.default, {
    icon: _icons.moreVertical,
    label: (0, _i18n.__)('Custom color options'),
    toggleProps: {
      isSmall: true
    }
  }, ({
    onClose
  }) => (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_navigableContainer.NavigableMenu, {
    role: "menu"
  }, (0, _element.createElement)(_button.default, {
    variant: "tertiary",
    onClick: () => {
      setEditingColor(null);
      setIsEditing(false);
      onChange();
      onClose();
    }
  }, (0, _i18n.__)('Remove all custom colors'))))))), hasColors && (0, _element.createElement)(_element.Fragment, null, isEditing && (0, _element.createElement)(ColorPaletteEditListView, {
    colors: colors,
    onChange: onChange,
    editingColor: editingColor,
    setEditingColor: setEditingColor
  }), !isEditing && (0, _element.createElement)(_colorPalette.default, {
    colors: colors,
    onChange: () => {},
    clearable: false,
    disableCustomColors: true
  })), !hasColors && (0, _i18n.__)('Custom colors are empty! Add some colors to create your own color palette.'));
}
//# sourceMappingURL=index.js.map