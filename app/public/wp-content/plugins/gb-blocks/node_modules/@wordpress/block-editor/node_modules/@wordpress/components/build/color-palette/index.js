"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ColorPalette;

var _element = require("@wordpress/element");

var _lodash = require("lodash");

var _colord = require("colord");

var _names = _interopRequireDefault(require("colord/plugins/names"));

var _a11y = _interopRequireDefault(require("colord/plugins/a11y"));

var _i18n = require("@wordpress/i18n");

var _dropdown = _interopRequireDefault(require("../dropdown"));

var _colorPicker = require("../color-picker");

var _circularOptionPicker = _interopRequireDefault(require("../circular-option-picker"));

var _vStack = require("../v-stack");

var _styles = require("./styles");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
(0, _colord.extend)([_names.default, _a11y.default]);

function SinglePalette({
  className,
  clearColor,
  colors,
  onChange,
  value,
  actions
}) {
  const colorOptions = (0, _element.useMemo)(() => {
    return (0, _lodash.map)(colors, ({
      color,
      name
    }) => {
      const colordColor = (0, _colord.colord)(color);
      return (0, _element.createElement)(_circularOptionPicker.default.Option, {
        key: color,
        isSelected: value === color,
        selectedIconProps: value === color ? {
          fill: colordColor.contrast() > colordColor.contrast('#000') ? '#fff' : '#000'
        } : {},
        tooltipText: name || // translators: %s: color hex code e.g: "#f00".
        (0, _i18n.sprintf)((0, _i18n.__)('Color code: %s'), color),
        style: {
          backgroundColor: color,
          color
        },
        onClick: value === color ? clearColor : () => onChange(color),
        "aria-label": name ? // translators: %s: The name of the color e.g: "vivid red".
        (0, _i18n.sprintf)((0, _i18n.__)('Color: %s'), name) : // translators: %s: color hex code e.g: "#f00".
        (0, _i18n.sprintf)((0, _i18n.__)('Color code: %s'), color)
      });
    });
  }, [colors, value, onChange, clearColor]);
  return (0, _element.createElement)(_circularOptionPicker.default, {
    className: className,
    options: colorOptions,
    actions: actions
  });
}

function MultiplePalettes({
  className,
  clearColor,
  colors,
  onChange,
  value,
  actions
}) {
  return (0, _element.createElement)(_vStack.VStack, {
    spacing: 3,
    className: className
  }, colors.map(({
    name,
    colors: colorPalette
  }, index) => {
    return (0, _element.createElement)(_vStack.VStack, {
      spacing: 2,
      key: index
    }, (0, _element.createElement)(_styles.ColorHeading, null, name), (0, _element.createElement)(SinglePalette, {
      clearColor: clearColor,
      colors: colorPalette,
      onChange: onChange,
      value: value,
      actions: colors.length === index + 1 ? actions : null
    }));
  }));
}

function ColorPalette({
  clearable = true,
  className,
  colors,
  disableCustomColors = false,
  enableAlpha,
  onChange,
  value,
  __experimentalHasMultipleOrigins = false
}) {
  const clearColor = (0, _element.useCallback)(() => onChange(undefined), [onChange]);
  const Component = __experimentalHasMultipleOrigins ? MultiplePalettes : SinglePalette;

  const renderCustomColorPicker = () => (0, _element.createElement)(_colorPicker.ColorPicker, {
    color: value,
    onChange: color => onChange(color),
    enableAlpha: enableAlpha
  });

  return (0, _element.createElement)(_vStack.VStack, {
    spacing: 3,
    className: className
  }, !disableCustomColors && (0, _element.createElement)(_dropdown.default, {
    renderContent: renderCustomColorPicker,
    renderToggle: ({
      isOpen,
      onToggle
    }) => (0, _element.createElement)("button", {
      className: "components-color-palette__custom-color",
      "aria-expanded": isOpen,
      "aria-haspopup": "true",
      onClick: onToggle,
      "aria-label": (0, _i18n.__)('Custom color picker'),
      style: {
        background: value
      }
    }, value)
  }), (0, _element.createElement)(Component, {
    clearable: clearable,
    clearColor: clearColor,
    colors: colors,
    onChange: onChange,
    value: value,
    actions: !!clearable && (0, _element.createElement)(_circularOptionPicker.default.ButtonAction, {
      onClick: clearColor
    }, (0, _i18n.__)('Clear'))
  }));
}
//# sourceMappingURL=index.js.map