import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports

/**
 * Internal dependencies
 */
import ToolsPanelHeader from '../tools-panel-header';
import { ToolsPanelContext } from '../context';
import { useToolsPanel } from './hook';
import { Grid } from '../../grid';
import { contextConnect } from '../../ui/context';

const ToolsPanel = (props, forwardedRef) => {
  const {
    children,
    label,
    panelContext,
    resetAllItems,
    toggleItem,
    className
  } = useToolsPanel(props); // Props are not directly passed through to avoid exposing Grid props
  // until agreement has been reached on how ToolsPanel layout should be
  // handled.

  return createElement(Grid, {
    columns: 2,
    className: className,
    ref: forwardedRef
  }, createElement(ToolsPanelContext.Provider, {
    value: panelContext
  }, createElement(ToolsPanelHeader, {
    label: label,
    resetAll: resetAllItems,
    toggleItem: toggleItem
  }), children));
};

const ConnectedToolsPanel = contextConnect(ToolsPanel, 'ToolsPanel');
export default ConnectedToolsPanel;
//# sourceMappingURL=component.js.map