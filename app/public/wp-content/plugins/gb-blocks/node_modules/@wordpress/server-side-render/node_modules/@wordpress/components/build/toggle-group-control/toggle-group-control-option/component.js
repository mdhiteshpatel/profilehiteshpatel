"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _reakit = require("reakit");

var _compose = require("@wordpress/compose");

var _context = require("../../ui/context");

var _context2 = require("../context");

var styles = _interopRequireWildcard(require("./styles"));

var _hooks = require("../../utils/hooks");

/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports
// eslint-disable-next-line no-restricted-imports

/**
 * Internal dependencies
 */
const {
  ButtonContentView,
  LabelPlaceholderView,
  LabelView
} = styles;

function ToggleGroupControlOption(props, forwardedRef) {
  var _radioProps$ariaLabe;

  const toggleGroupControlContext = (0, _context2.useToggleGroupControlContext)();
  const id = (0, _compose.useInstanceId)(ToggleGroupControlOption, toggleGroupControlContext.baseId || 'toggle-group-control-option');
  const buttonProps = (0, _context.useContextSystem)({ ...props,
    id
  }, 'ToggleGroupControlOption');
  const {
    className,
    isBlock = false,
    label,
    value,
    ...radioProps
  } = { ...toggleGroupControlContext,
    ...buttonProps
  };
  const isActive = radioProps.state === value;
  const cx = (0, _hooks.useCx)();
  const labelViewClasses = cx(isBlock && styles.labelBlock);
  const classes = cx(styles.buttonView, className, isActive && styles.buttonActive);
  return (0, _element.createElement)(LabelView, {
    className: labelViewClasses,
    "data-active": isActive
  }, (0, _element.createElement)(_reakit.Radio, (0, _extends2.default)({}, radioProps, {
    as: "button",
    "aria-label": (_radioProps$ariaLabe = radioProps['aria-label']) !== null && _radioProps$ariaLabe !== void 0 ? _radioProps$ariaLabe : label,
    className: classes,
    "data-value": value,
    ref: forwardedRef,
    value: value
  }), (0, _element.createElement)(ButtonContentView, null, label), (0, _element.createElement)(LabelPlaceholderView, {
    "aria-hidden": true
  }, label)));
}
/**
 * `ToggleGroupControlOption` is a form component and is meant to be used as a
 * child of `ToggleGroupControl`.
 *
 * @example
 * ```jsx
 * import {
 *   __experimentalToggleGroupControl as ToggleGroupControl,
 *   __experimentalToggleGroupControlOption as ToggleGroupControlOption,
 * } from '@wordpress/components';
 *
 * function Example() {
 *   return (
 *     <ToggleGroupControl label="my label" value="vertical" isBlock>
 *       <ToggleGroupControlOption value="horizontal" label="Horizontal" />
 *       <ToggleGroupControlOption value="vertical" label="Vertical" />
 *     </ToggleGroupControl>
 *   );
 * }
 * ```
 */


const ConnectedToggleGroupControlOption = (0, _context.contextConnect)(ToggleGroupControlOption, 'ToggleGroupControlOption');
var _default = ConnectedToggleGroupControlOption;
exports.default = _default;
//# sourceMappingURL=component.js.map