{"version":3,"file":"sortable.cjs.production.min.js","sources":["../src/utilities/arrayMove.ts","../src/utilities/isValidIndex.ts","../src/strategies/horizontalListSorting.ts","../src/strategies/rectSorting.ts","../src/strategies/verticalListSorting.ts","../src/components/SortableContext.tsx","../src/hooks/defaults.ts","../src/sensors/keyboard/sortableKeyboardCoordinates.ts","../src/utilities/getSortedRects.ts","../src/utilities/arraySwap.ts","../src/strategies/rectSwapping.ts","../src/hooks/useSortable.ts","../src/hooks/utilities/useDerivedTransform.ts"],"sourcesContent":["/**\n * Move an array item to a different position. Returns a new array with the item moved to the new position.\n */\nexport function arrayMove<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n  newArray.splice(\n    to < 0 ? newArray.length + to : to,\n    0,\n    newArray.splice(from, 1)[0]\n  );\n\n  return newArray;\n}\n","export function isValidIndex(index: number | null): index is number {\n  return index !== null && index >= 0;\n}\n","import type {ClientRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const horizontalListSortingStrategy: SortingStrategy = ({\n  rects,\n  activeNodeRect: fallbackActiveRect,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const activeNodeRect = rects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  const itemGap = getItemGap(rects, index, activeIndex);\n\n  if (index === activeIndex) {\n    const newIndexRect = rects[overIndex];\n\n    if (!newIndexRect) {\n      return null;\n    }\n\n    return {\n      x:\n        activeIndex < overIndex\n          ? newIndexRect.left +\n            newIndexRect.width -\n            (activeNodeRect.left + activeNodeRect.width)\n          : newIndexRect.left - activeNodeRect.left,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: -activeNodeRect.width - itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: activeNodeRect.width + itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(rects: ClientRect[], index: number, activeIndex: number) {\n  const currentRect: ClientRect | undefined = rects[index];\n  const previousRect: ClientRect | undefined = rects[index - 1];\n  const nextRect: ClientRect | undefined = rects[index + 1];\n\n  if (!currentRect || (!previousRect && !nextRect)) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.left - (previousRect.left + previousRect.width)\n      : nextRect.left - (currentRect.left + currentRect.width);\n  }\n\n  return nextRect\n    ? nextRect.left - (currentRect.left + currentRect.width)\n    : currentRect.left - (previousRect.left + previousRect.width);\n}\n","import {arrayMove} from '../utilities';\nimport type {SortingStrategy} from '../types';\n\nexport const rectSortingStrategy: SortingStrategy = ({\n  rects,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const newRects = arrayMove(rects, overIndex, activeIndex);\n\n  const oldRect = rects[index];\n  const newRect = newRects[index];\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import type {ClientRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const verticalListSortingStrategy: SortingStrategy = ({\n  activeIndex,\n  activeNodeRect: fallbackActiveRect,\n  index,\n  rects,\n  overIndex,\n}) => {\n  const activeNodeRect = rects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  if (index === activeIndex) {\n    const overIndexRect = rects[overIndex];\n\n    if (!overIndexRect) {\n      return null;\n    }\n\n    return {\n      x: 0,\n      y:\n        activeIndex < overIndex\n          ? overIndexRect.top +\n            overIndexRect.height -\n            (activeNodeRect.top + activeNodeRect.height)\n          : overIndexRect.top - activeNodeRect.top,\n      ...defaultScale,\n    };\n  }\n\n  const itemGap = getItemGap(rects, index, activeIndex);\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: 0,\n      y: -activeNodeRect.height - itemGap,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: 0,\n      y: activeNodeRect.height + itemGap,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(\n  clientRects: ClientRect[],\n  index: number,\n  activeIndex: number\n) {\n  const currentRect: ClientRect | undefined = clientRects[index];\n  const previousRect: ClientRect | undefined = clientRects[index - 1];\n  const nextRect: ClientRect | undefined = clientRects[index + 1];\n\n  if (!currentRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.top - (previousRect.top + previousRect.height)\n      : nextRect\n      ? nextRect.top - (currentRect.top + currentRect.height)\n      : 0;\n  }\n\n  return nextRect\n    ? nextRect.top - (currentRect.top + currentRect.height)\n    : previousRect\n    ? currentRect.top - (previousRect.top + previousRect.height)\n    : 0;\n}\n","import React, {useEffect, useMemo, useRef} from 'react';\nimport {useDndContext, ClientRect, UniqueIdentifier} from '@dnd-kit/core';\nimport {useIsomorphicLayoutEffect, useUniqueId} from '@dnd-kit/utilities';\n\nimport type {SortingStrategy} from '../types';\nimport {getSortedRects} from '../utilities';\nimport {rectSortingStrategy} from '../strategies';\n\nexport interface Props {\n  children: React.ReactNode;\n  items: (UniqueIdentifier | {id: UniqueIdentifier})[];\n  strategy?: SortingStrategy;\n  id?: string;\n}\n\nconst ID_PREFIX = 'Sortable';\n\ninterface ContextDescriptor {\n  activeIndex: number;\n  containerId: string;\n  disableTransforms: boolean;\n  items: UniqueIdentifier[];\n  overIndex: number;\n  useDragOverlay: boolean;\n  sortedRects: ClientRect[];\n  strategy: SortingStrategy;\n}\n\nexport const Context = React.createContext<ContextDescriptor>({\n  activeIndex: -1,\n  containerId: ID_PREFIX,\n  disableTransforms: false,\n  items: [],\n  overIndex: -1,\n  useDragOverlay: false,\n  sortedRects: [],\n  strategy: rectSortingStrategy,\n});\n\nexport function SortableContext({\n  children,\n  id,\n  items: userDefinedItems,\n  strategy = rectSortingStrategy,\n}: Props) {\n  const {\n    active,\n    dragOverlay,\n    droppableRects,\n    over,\n    measureDroppableContainers,\n    measuringScheduled,\n  } = useDndContext();\n  const containerId = useUniqueId(ID_PREFIX, id);\n  const useDragOverlay = Boolean(dragOverlay.rect !== null);\n  const items = useMemo(\n    () =>\n      userDefinedItems.map((item) =>\n        typeof item === 'string' ? item : item.id\n      ),\n    [userDefinedItems]\n  );\n  const isDragging = active != null;\n  const activeIndex = active ? items.indexOf(active.id) : -1;\n  const overIndex = over ? items.indexOf(over.id) : -1;\n  const previousItemsRef = useRef(items);\n  const sortedRects = getSortedRects(items, droppableRects);\n  const itemsHaveChanged = !isEqual(items, previousItemsRef.current);\n  const disableTransforms =\n    (overIndex !== -1 && activeIndex === -1) || itemsHaveChanged;\n\n  useIsomorphicLayoutEffect(() => {\n    if (itemsHaveChanged && isDragging && !measuringScheduled) {\n      measureDroppableContainers(items);\n    }\n  }, [\n    itemsHaveChanged,\n    items,\n    isDragging,\n    measureDroppableContainers,\n    measuringScheduled,\n  ]);\n\n  useEffect(() => {\n    previousItemsRef.current = items;\n  }, [items]);\n\n  const contextValue = useMemo(\n    (): ContextDescriptor => ({\n      activeIndex,\n      containerId,\n      disableTransforms,\n      items,\n      overIndex,\n      useDragOverlay,\n      sortedRects,\n      strategy,\n    }),\n    [\n      activeIndex,\n      containerId,\n      disableTransforms,\n      items,\n      overIndex,\n      sortedRects,\n      useDragOverlay,\n      strategy,\n    ]\n  );\n\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>;\n}\n\nfunction isEqual(arr1: string[], arr2: string[]) {\n  return arr1.join() === arr2.join();\n}\n","import {CSS} from '@dnd-kit/utilities';\n\nimport {arrayMove} from '../utilities';\n\nimport type {\n  AnimateLayoutChanges,\n  NewIndexGetter,\n  SortableTransition,\n} from './types';\n\nexport const defaultNewIndexGetter: NewIndexGetter = ({\n  id,\n  items,\n  activeIndex,\n  overIndex,\n}) => arrayMove(items, activeIndex, overIndex).indexOf(id);\n\nexport const defaultAnimateLayoutChanges: AnimateLayoutChanges = ({\n  containerId,\n  isSorting,\n  wasDragging,\n  index,\n  items,\n  newIndex,\n  previousItems,\n  previousContainerId,\n  transition,\n}) => {\n  if (!transition || !wasDragging) {\n    return false;\n  }\n\n  if (previousItems !== items && index === newIndex) {\n    return false;\n  }\n\n  if (isSorting) {\n    return true;\n  }\n\n  return newIndex !== index && containerId === previousContainerId;\n};\n\nexport const defaultTransition: SortableTransition = {\n  duration: 200,\n  easing: 'ease',\n};\n\nexport const transitionProperty = 'transform';\n\nexport const disabledTransition = CSS.Transition.toString({\n  property: transitionProperty,\n  duration: 0,\n  easing: 'linear',\n});\n\nexport const defaultAttributes = {\n  roleDescription: 'sortable',\n};\n","import {\n  closestCorners,\n  getScrollableAncestors,\n  getFirstCollision,\n  KeyboardCode,\n  DroppableContainer,\n  KeyboardCoordinateGetter,\n} from '@dnd-kit/core';\n\nconst directions: string[] = [\n  KeyboardCode.Down,\n  KeyboardCode.Right,\n  KeyboardCode.Up,\n  KeyboardCode.Left,\n];\n\nexport const sortableKeyboardCoordinates: KeyboardCoordinateGetter = (\n  event,\n  {context: {active, droppableContainers, collisionRect, scrollableAncestors}}\n) => {\n  if (directions.includes(event.code)) {\n    event.preventDefault();\n\n    if (!active || !collisionRect) {\n      return;\n    }\n\n    const filteredContainers: DroppableContainer[] = [];\n\n    droppableContainers.getEnabled().forEach((entry) => {\n      if (!entry || entry?.disabled) {\n        return;\n      }\n\n      const rect = entry?.rect.current;\n\n      if (!rect) {\n        return;\n      }\n\n      switch (event.code) {\n        case KeyboardCode.Down:\n          if (collisionRect.top + collisionRect.height <= rect.top) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Up:\n          if (collisionRect.top >= rect.top + rect.height) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Left:\n          if (collisionRect.left >= rect.left + rect.width) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Right:\n          if (collisionRect.left + collisionRect.width <= rect.left) {\n            filteredContainers.push(entry);\n          }\n          break;\n      }\n    });\n\n    const collisions = closestCorners({\n      active,\n      collisionRect: collisionRect,\n      droppableContainers: filteredContainers,\n      pointerCoordinates: null,\n    });\n    const closestId = getFirstCollision(collisions, 'id');\n\n    if (closestId != null) {\n      const newDroppable = droppableContainers.get(closestId);\n      const newNode = newDroppable?.node.current;\n      const newRect = newDroppable?.rect.current;\n\n      if (newNode && newRect) {\n        const newScrollAncestors = getScrollableAncestors(newNode);\n        const hasDifferentScrollAncestors = newScrollAncestors.some(\n          (element, index) => scrollableAncestors[index] !== element\n        );\n        const offset = hasDifferentScrollAncestors\n          ? {\n              x: 0,\n              y: 0,\n            }\n          : {\n              x: collisionRect.width - newRect.width,\n              y: collisionRect.height - newRect.height,\n            };\n        const newCoordinates = {\n          x: newRect.left - offset.x,\n          y: newRect.top - offset.y,\n        };\n\n        return newCoordinates;\n      }\n    }\n  }\n\n  return undefined;\n};\n","import type {\n  ClientRect,\n  UniqueIdentifier,\n  UseDndContextReturnValue,\n} from '@dnd-kit/core';\n\nexport function getSortedRects(\n  items: UniqueIdentifier[],\n  rects: UseDndContextReturnValue['droppableRects']\n) {\n  return items.reduce<ClientRect[]>((accumulator, id, index) => {\n    const rect = rects.get(id);\n\n    if (rect) {\n      accumulator[index] = rect;\n    }\n\n    return accumulator;\n  }, Array(items.length));\n}\n","/**\n * Swap an array item to a different position. Returns a new array with the item swapped to the new position.\n */\nexport function arraySwap<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n\n  newArray[from] = array[to];\n  newArray[to] = array[from];\n\n  return newArray;\n}\n","import type {SortingStrategy} from '../types';\n\nexport const rectSwappingStrategy: SortingStrategy = ({\n  activeIndex,\n  index,\n  rects,\n  overIndex,\n}) => {\n  let oldRect;\n  let newRect;\n\n  if (index === activeIndex) {\n    oldRect = rects[index];\n    newRect = rects[overIndex];\n  }\n\n  if (index === overIndex) {\n    oldRect = rects[index];\n    newRect = rects[activeIndex];\n  }\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import {useContext, useEffect, useMemo, useRef} from 'react';\nimport {\n  useDraggable,\n  useDroppable,\n  UseDraggableArguments,\n  UseDroppableArguments,\n} from '@dnd-kit/core';\nimport {CSS, isKeyboardEvent, useCombinedRefs} from '@dnd-kit/utilities';\n\nimport {Context} from '../components';\nimport type {SortingStrategy} from '../types';\nimport {isValidIndex} from '../utilities';\nimport {\n  defaultAnimateLayoutChanges,\n  defaultAttributes,\n  defaultNewIndexGetter,\n  defaultTransition,\n  disabledTransition,\n  transitionProperty,\n} from './defaults';\nimport type {\n  AnimateLayoutChanges,\n  NewIndexGetter,\n  SortableTransition,\n} from './types';\nimport {useDerivedTransform} from './utilities';\n\nexport interface Arguments\n  extends UseDraggableArguments,\n    Pick<UseDroppableArguments, 'resizeObserverConfig'> {\n  animateLayoutChanges?: AnimateLayoutChanges;\n  getNewIndex?: NewIndexGetter;\n  strategy?: SortingStrategy;\n  transition?: SortableTransition | null;\n}\n\nexport function useSortable({\n  animateLayoutChanges = defaultAnimateLayoutChanges,\n  attributes: userDefinedAttributes,\n  disabled,\n  data: customData,\n  getNewIndex = defaultNewIndexGetter,\n  id,\n  strategy: localStrategy,\n  resizeObserverConfig,\n  transition = defaultTransition,\n}: Arguments) {\n  const {\n    items,\n    containerId,\n    activeIndex,\n    disableTransforms,\n    sortedRects,\n    overIndex,\n    useDragOverlay,\n    strategy: globalStrategy,\n  } = useContext(Context);\n  const index = items.indexOf(id);\n  const data = useMemo(\n    () => ({sortable: {containerId, index, items}, ...customData}),\n    [containerId, customData, index, items]\n  );\n  const itemsAfterCurrentSortable = useMemo(\n    () => items.slice(items.indexOf(id)),\n    [items, id]\n  );\n  const {rect, node, isOver, setNodeRef: setDroppableNodeRef} = useDroppable({\n    id,\n    data,\n    resizeObserverConfig: {\n      updateMeasurementsFor: itemsAfterCurrentSortable,\n      ...resizeObserverConfig,\n    },\n  });\n  const {\n    active,\n    activatorEvent,\n    activeNodeRect,\n    attributes,\n    setNodeRef: setDraggableNodeRef,\n    listeners,\n    isDragging,\n    over,\n    transform,\n  } = useDraggable({\n    id,\n    data,\n    attributes: {\n      ...defaultAttributes,\n      ...userDefinedAttributes,\n    },\n    disabled,\n  });\n  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);\n  const isSorting = Boolean(active);\n  const displaceItem =\n    isSorting &&\n    !disableTransforms &&\n    isValidIndex(activeIndex) &&\n    isValidIndex(overIndex);\n  const shouldDisplaceDragSource = !useDragOverlay && isDragging;\n  const dragSourceDisplacement =\n    shouldDisplaceDragSource && displaceItem ? transform : null;\n  const strategy = localStrategy ?? globalStrategy;\n  const finalTransform = displaceItem\n    ? dragSourceDisplacement ??\n      strategy({\n        rects: sortedRects,\n        activeNodeRect,\n        activeIndex,\n        overIndex,\n        index,\n      })\n    : null;\n  const newIndex =\n    isValidIndex(activeIndex) && isValidIndex(overIndex)\n      ? getNewIndex({id, items, activeIndex, overIndex})\n      : index;\n  const activeId = active?.id;\n  const previous = useRef({\n    activeId,\n    items,\n    newIndex,\n    containerId,\n  });\n  const itemsHaveChanged = items !== previous.current.items;\n  const shouldAnimateLayoutChanges = animateLayoutChanges({\n    active,\n    containerId,\n    isDragging,\n    isSorting,\n    id,\n    index,\n    items,\n    newIndex: previous.current.newIndex,\n    previousItems: previous.current.items,\n    previousContainerId: previous.current.containerId,\n    transition,\n    wasDragging: previous.current.activeId != null,\n  });\n  const derivedTransform = useDerivedTransform({\n    disabled: !shouldAnimateLayoutChanges,\n    index,\n    node,\n    rect,\n  });\n\n  useEffect(() => {\n    if (isSorting && previous.current.newIndex !== newIndex) {\n      previous.current.newIndex = newIndex;\n    }\n\n    if (containerId !== previous.current.containerId) {\n      previous.current.containerId = containerId;\n    }\n\n    if (items !== previous.current.items) {\n      previous.current.items = items;\n    }\n\n    if (activeId !== previous.current.activeId) {\n      previous.current.activeId = activeId;\n    }\n  }, [activeId, isSorting, newIndex, containerId, items]);\n\n  return {\n    active,\n    activeIndex,\n    attributes,\n    rect,\n    index,\n    newIndex,\n    items,\n    isOver,\n    isSorting,\n    isDragging,\n    listeners,\n    node,\n    overIndex,\n    over,\n    setNodeRef,\n    setDroppableNodeRef,\n    setDraggableNodeRef,\n    transform: derivedTransform ?? finalTransform,\n    transition: getTransition(),\n  };\n\n  function getTransition() {\n    if (\n      // Temporarily disable transitions for a single frame to set up derived transforms\n      derivedTransform ||\n      // Or to prevent items jumping to back to their \"new\" position when items change\n      (itemsHaveChanged && previous.current.newIndex === index)\n    ) {\n      return disabledTransition;\n    }\n\n    if (\n      (shouldDisplaceDragSource && !isKeyboardEvent(activatorEvent)) ||\n      !transition\n    ) {\n      return undefined;\n    }\n\n    if (isSorting || shouldAnimateLayoutChanges) {\n      return CSS.Transition.toString({\n        ...transition,\n        property: transitionProperty,\n      });\n    }\n\n    return undefined;\n  }\n}\n","import {useEffect, useRef, useState} from 'react';\nimport {getClientRect, ClientRect} from '@dnd-kit/core';\nimport {Transform, useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\ninterface Arguments {\n  rect: React.MutableRefObject<ClientRect | null>;\n  disabled: boolean;\n  index: number;\n  node: React.MutableRefObject<HTMLElement | null>;\n}\n\n/*\n * When the index of an item changes while sorting,\n * we need to temporarily disable the transforms\n */\nexport function useDerivedTransform({disabled, index, node, rect}: Arguments) {\n  const [derivedTransform, setDerivedtransform] = useState<Transform | null>(\n    null\n  );\n  const previousIndex = useRef(index);\n\n  useIsomorphicLayoutEffect(() => {\n    if (!disabled && index !== previousIndex.current && node.current) {\n      const initial = rect.current;\n\n      if (initial) {\n        const current = getClientRect(node.current, {\n          ignoreTransform: true,\n        });\n\n        const delta = {\n          x: initial.left - current.left,\n          y: initial.top - current.top,\n          scaleX: initial.width / current.width,\n          scaleY: initial.height / current.height,\n        };\n\n        if (delta.x || delta.y) {\n          setDerivedtransform(delta);\n        }\n      }\n    }\n\n    if (index !== previousIndex.current) {\n      previousIndex.current = index;\n    }\n  }, [disabled, index, node, rect]);\n\n  useEffect(() => {\n    if (derivedTransform) {\n      requestAnimationFrame(() => {\n        setDerivedtransform(null);\n      });\n    }\n  }, [derivedTransform]);\n\n  return derivedTransform;\n}\n"],"names":["arrayMove","array","from","to","newArray","slice","splice","length","isValidIndex","index","defaultScale","scaleX","scaleY","rectSortingStrategy","rects","activeIndex","overIndex","newRects","oldRect","newRect","x","left","y","top","width","height","Context","React","createContext","containerId","disableTransforms","items","useDragOverlay","sortedRects","strategy","defaultNewIndexGetter","id","indexOf","defaultAnimateLayoutChanges","isSorting","wasDragging","newIndex","previousItems","previousContainerId","transition","defaultTransition","duration","easing","disabledTransition","CSS","Transition","toString","property","defaultAttributes","roleDescription","directions","KeyboardCode","Down","Right","Up","Left","children","userDefinedItems","active","dragOverlay","droppableRects","over","measureDroppableContainers","measuringScheduled","useDndContext","useUniqueId","Boolean","rect","useMemo","map","item","isDragging","previousItemsRef","useRef","reduce","accumulator","get","Array","getSortedRects","itemsHaveChanged","arr2","current","join","useIsomorphicLayoutEffect","useEffect","contextValue","Provider","value","activeNodeRect","fallbackActiveRect","itemGap","currentRect","previousRect","nextRect","getItemGap","newIndexRect","event","context","droppableContainers","collisionRect","scrollableAncestors","includes","code","preventDefault","filteredContainers","getEnabled","forEach","entry","disabled","push","collisions","closestCorners","pointerCoordinates","closestId","getFirstCollision","newDroppable","newNode","node","offset","getScrollableAncestors","some","element","animateLayoutChanges","attributes","userDefinedAttributes","data","customData","getNewIndex","localStrategy","resizeObserverConfig","globalStrategy","useContext","sortable","itemsAfterCurrentSortable","isOver","setNodeRef","setDroppableNodeRef","useDroppable","updateMeasurementsFor","activatorEvent","setDraggableNodeRef","listeners","transform","useDraggable","useCombinedRefs","displaceItem","shouldDisplaceDragSource","dragSourceDisplacement","finalTransform","activeId","previous","shouldAnimateLayoutChanges","derivedTransform","setDerivedtransform","useState","previousIndex","initial","getClientRect","ignoreTransform","delta","requestAnimationFrame","useDerivedTransform","isKeyboardEvent","overIndexRect","clientRects"],"mappings":"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"}