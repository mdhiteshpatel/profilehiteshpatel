"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _reakit = require("reakit");

var _compose = require("@wordpress/compose");

var _context = require("../../ui/context");

var _context2 = require("../context");

var styles = _interopRequireWildcard(require("./styles"));

var _hooks = require("../../utils/hooks");

var _tooltip = _interopRequireDefault(require("../../tooltip"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const {
  ButtonContentView,
  LabelPlaceholderView,
  LabelView
} = styles;

const WithToolTip = _ref => {
  let {
    showTooltip,
    text,
    children
  } = _ref;

  if (showTooltip && text) {
    return (0, _element.createElement)(_tooltip.default, {
      text: text,
      position: "top center"
    }, children);
  }

  return (0, _element.createElement)(_element.Fragment, null, children);
};

function ToggleGroupControlOption(props, forwardedRef) {
  const toggleGroupControlContext = (0, _context2.useToggleGroupControlContext)();
  const id = (0, _compose.useInstanceId)(ToggleGroupControlOption, toggleGroupControlContext.baseId || 'toggle-group-control-option');
  const buttonProps = (0, _context.useContextSystem)({ ...props,
    id
  }, 'ToggleGroupControlOption');
  const {
    className,
    isBlock = false,
    label,
    value,
    showTooltip = false,
    ...radioProps
  } = { ...toggleGroupControlContext,
    ...buttonProps
  };
  const isActive = radioProps.state === value;
  const cx = (0, _hooks.useCx)();
  const labelViewClasses = cx(isBlock && styles.labelBlock);
  const classes = cx(styles.buttonView, className, isActive && styles.buttonActive);
  const optionLabel = !!radioProps['aria-label'] ? radioProps['aria-label'] : label;
  return (0, _element.createElement)(LabelView, {
    className: labelViewClasses,
    "data-active": isActive
  }, (0, _element.createElement)(WithToolTip, {
    showTooltip: showTooltip,
    text: optionLabel
  }, (0, _element.createElement)(_reakit.Radio, (0, _extends2.default)({}, radioProps, {
    as: "button",
    "aria-label": optionLabel,
    className: classes,
    "data-value": value,
    ref: forwardedRef,
    value: value
  }), (0, _element.createElement)(ButtonContentView, null, label), (0, _element.createElement)(LabelPlaceholderView, {
    "aria-hidden": true
  }, label))));
}
/**
 * `ToggleGroupControlOption` is a form component and is meant to be used as a
 * child of `ToggleGroupControl`.
 *
 * @example
 * ```jsx
 * import {
 *   __experimentalToggleGroupControl as ToggleGroupControl,
 *   __experimentalToggleGroupControlOption as ToggleGroupControlOption,
 * } from '@wordpress/components';
 *
 * function Example() {
 *   return (
 *     <ToggleGroupControl label="my label" value="vertical" isBlock>
 *       <ToggleGroupControlOption value="horizontal" label="Horizontal" />
 *       <ToggleGroupControlOption value="vertical" label="Vertical" />
 *     </ToggleGroupControl>
 *   );
 * }
 * ```
 */


const ConnectedToggleGroupControlOption = (0, _context.contextConnect)(ToggleGroupControlOption, 'ToggleGroupControlOption');
var _default = ConnectedToggleGroupControlOption;
exports.default = _default;
//# sourceMappingURL=component.js.map