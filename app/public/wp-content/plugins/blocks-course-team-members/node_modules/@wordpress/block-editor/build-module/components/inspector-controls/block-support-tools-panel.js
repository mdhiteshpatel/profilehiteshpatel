import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __experimentalToolsPanel as ToolsPanel } from '@wordpress/components';
import { useDispatch, useSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import { store as blockEditorStore } from '../../store';
import { cleanEmptyObject } from '../../hooks/utils';
export default function BlockSupportToolsPanel(_ref) {
  let {
    children,
    group,
    label
  } = _ref;
  const {
    clientId,
    attributes
  } = useSelect(select => {
    const {
      getBlockAttributes,
      getSelectedBlockClientId
    } = select(blockEditorStore);
    const selectedBlockClientId = getSelectedBlockClientId();
    return {
      clientId: selectedBlockClientId,
      attributes: getBlockAttributes(selectedBlockClientId)
    };
  }, []);
  const {
    updateBlockAttributes
  } = useDispatch(blockEditorStore);

  const resetAll = function () {
    let resetFilters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    const {
      style
    } = attributes;
    let newAttributes = {
      style
    };
    resetFilters.forEach(resetFilter => {
      newAttributes = { ...newAttributes,
        ...resetFilter(newAttributes)
      };
    }); // Enforce a cleaned style object.

    newAttributes = { ...newAttributes,
      style: cleanEmptyObject(newAttributes.style)
    };
    updateBlockAttributes(clientId, newAttributes);
  };

  return createElement(ToolsPanel, {
    className: `${group}-block-support-panel`,
    label: label,
    resetAll: resetAll,
    key: clientId,
    panelId: clientId,
    hasInnerWrapper: true,
    shouldRenderPlaceholderItems: true // Required to maintain fills ordering.

  }, children);
}
//# sourceMappingURL=block-support-tools-panel.js.map