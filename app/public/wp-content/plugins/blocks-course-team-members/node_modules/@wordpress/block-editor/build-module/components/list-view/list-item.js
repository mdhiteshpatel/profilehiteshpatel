import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { Button, VisuallyHidden } from '@wordpress/components';
import { __experimentalGetBlockLabel as getBlockLabel, getBlockType } from '@wordpress/blocks';
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import BlockIcon from '../block-icon';
export default function ListViewListItem(_ref) {
  let {
    block,
    onClick,
    isSelected,
    wrapperComponent: WrapperComponent,
    children
  } = _ref;
  const blockType = getBlockType(block.name);
  const blockLabel = blockType ? getBlockLabel(blockType, block.attributes) : null;
  return createElement("div", {
    className: "block-editor-list-view__list-item"
  }, createElement(WrapperComponent, {
    className: classnames('block-editor-list-view__list-item-button', {
      'is-selected': isSelected
    }),
    onClick: onClick
  }, createElement(BlockIcon, {
    icon: blockType === null || blockType === void 0 ? void 0 : blockType.icon,
    showColors: true
  }), children ? children : blockLabel, isSelected && createElement(VisuallyHidden, {
    as: "span"
  }, __('(selected block)'))));
}
ListViewListItem.defaultProps = {
  onClick: () => {},
  wrapperComponent: props => createElement(Button, props)
};
//# sourceMappingURL=list-item.js.map